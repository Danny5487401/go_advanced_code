package main

/* 七大原则
1.开闭原则 ：软件中的对象（类，模块，函数等等）应该对于扩展是开放的，但是对于修改是封闭的
2.依赖倒置原则： a.高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口
			b.抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口
3.单一职责原则: 一个类不能太累
4.接口隔离原则: 客户不应被迫使用对其而言无用的方法或功能
5.迪米特法则: 也叫最少知识原则，一个软件实体应当尽可能少的与其他实体发生相互作用。
6.里氏代换原则:里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。
	而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范
7.合成复用原则:尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现

 */

/*
设计模式：是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。
分类：
1.创建型( 单例模式、简单工厂模式、工厂方法模式、抽象厂模式、建造者模式、原型模式)
2.结构型(代理模式、适配器模式、装饰模式、桥接模式、组合模式、享元模式、外观模式)
3.行为型(观察者模式、模板方法模式、命令模式、状态模式、职责链模式、解释器模式、中介者模式、访问者模式、策略模式、备忘录模式、迭代器模式)
 */

func main()  {

}