package main

import "fmt"

// 1.函数式编程概论
/* 背景
硬件性能的提升以及编译技术和虚拟机技术的改进，一些曾被性能问题所限制的动态语言开始受到关注，Python、Ruby 和 Lua 等语言都开始在应用中崭露头角。
	伴随动态语言的流行，函数式编程也再次进入了我们的视野。
	函数式编程是一种编程模型，他将计算机运算看做是数学中函数的计算，并且避免了状态以及变量的概念
 */

// 2。 闭包
/*
定义：闭包是由函数及其相关引用环境组合而成的实体(即：闭包=函数+引用环境)
解析： 闭包只是在形式和表现上像函数，但实际上不是函数。函数是一些可执行的代码，这些代码在函数被定义后就确定了，不会在执行时发生变化。
	所以一个函数只有一个实例。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。
	所谓引用环境是指在程序执行中的某个点所有处于活跃状态的约束所组成的集合。
	不同的引用环境和相同的函数组合可以产生不同的实例
 */

/*	3。 函数
函数是一等公民（First-class value），即函数可以作为另一个函数的返回值或参数，还可以作为一个变量的值。
	函数可以嵌套定义，即在一个函数内部可以定义另一个函数。面向对象编程中，我们把对象传来传去。
	那在函数式编程中，要做的是把函数传来传去，说成术语，把他叫做高阶函数。
 */
func adder()func(int)int  {
	sum := 0
	innerFunc := func(x int)int{
		sum += x
		return sum
	}
	return innerFunc

}

func main()  {
	pos,neg := adder(),adder()
	for i:=0;i<10;i++{
		fmt.Println(pos(i),neg(-2*i))
	}
}
/*	结果
0 0
1 -2
3 -6
6 -12
10 -20
15 -30
21 -42
28 -56
36 -72
45 -90

 */

/*	解析
当用不同的参数调用adder函数得到（pos(i)，neg(i)）函数时，得到的结果是隔离的，
	也就是说每次调用adder返回的函数都将生成并保存一个新的局部变量sum。其实这里adder函数返回的就是闭包
 */